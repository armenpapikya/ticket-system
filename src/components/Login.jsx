/* eslint-disable no-unused-vars */
/* eslint-disable react/prop-types */
import React, { useState } from "react";
import axios from "axios";
import "../cssComponents/Login.css";

const Login = ({ onLogin }) => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleLogin = async (e) => {
    e.preventDefault();
    if (loading) return;
    if (!username || !password) {
      setError("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¨÷Ä’°÷Å’∂’•’¨ ’¢’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’®");
      return;
    }

    setLoading(true);

    try {
      console.log("Login attempt with", { email: username, password });

      const response = await axios.post(
        "http://localhost:5000/api/auth/login",
        { email: username, password },
        { headers: { "Content-Type": "application/json" } }
      );

      console.log("‚úÖ Server Response:", response);
      console.log("üîç Response Data:", response.data);

      if (response.status !== 200 || !response.data.accessToken) {
        setError("’Ñ’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’∏÷Ç’¥’® ’±’°’≠’∏’≤’æ’•÷Å, ’ø’æ’µ’°’¨’∂’•÷Ä ’æ’•÷Ä’°’§’°÷Ä’±’æ’°’Æ ’π’•’∂:");
        return;
      }

      const { accessToken, user } = response.data;
      localStorage.setItem("token", accessToken);
      localStorage.setItem("username", user.username);
      localStorage.setItem("role", user.role);
      onLogin(user.role);
      console.log("Login successful:", response);
    } catch (error) {
      console.error("Login error:", error);
      if (error.response && error.response.data) {
        setError(error.response.data.message || "’ç’≠’°’¨ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä ’Ø’°’¥ ’Ω’•÷Ä’æ’•÷Ä’´ ’≠’∂’§’´÷Ä!");
      } else {
        setError("’ç’≠’°’¨ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä ’Ø’°’¥ ’Ω’•÷Ä’æ’•÷Ä’´ ’≠’∂’§’´÷Ä!");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login">
      <h1>’Ñ’∏÷Ç’ø÷Ñ ‘≥’∏÷Ä’Æ’•’¨</h1>
      {error && <div className="error">{error}</div>}
      <form onSubmit={handleLogin}>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          placeholder="’ï’£’ø’°’∂’∏÷Ç’∂ ’Ø’°’¥ ‘∑’¨‚Ä§ ’∞’°’Ω÷Å’•"
          required
        />
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="‘≥’°’≤’ø’∂’°’¢’°’º"
          required
        />
        <button type="submit" disabled={loading}>
          {loading ? "‘≤’•’º’∂’∏÷Ç’¥..." : "’Ñ’∏÷Ç’ø÷Ñ ‘≥’∏÷Ä’Æ’•’¨"}
        </button>
      </form>
    </div>
  );
};

export default Login;
